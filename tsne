#!/usr/bin/python
import gzip, cPickle
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
import sys, os
import argparse
import csv

from fasttsne import fast_tsne

mpl.rcParams['savefig.directory'] = 'results'

def stddev(x, order, axis):
    return np.std(x, axis=axis)

def norm_norm_norm(entropies):
    if True:
        entropies -= np.mean(entropies, axis=0)
        entropies -= np.mean(entropies, axis=1)[:, None]
        #entropies -= np.mean(entropies)
    else:
        entropies -= np.median(entropies, axis=1)[:, None]
        entropies -= np.median(entropies, axis=0)
        #entropies -= np.median(entropies, axis=1)[:, None]

    for f, order, axis in [
            #(stddev, 1, 0),
            #(stddev, 1, 1),
            #(np.linalg.norm, 1, 0),
            #(np.linalg.norm, 1, 1),
        ]:
        norm = f(entropies, order, axis)
        print "f %s order %s axis %s, norm is %s" % (f, order, axis, norm.shape)
        if np.all(norm):
            entropies /= (norm[:, None] if axis == 1 else norm)
        else:
            print "SKIPPING due to zeros"

    return entropies


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--pca-first', type=int, default=0,
                        help='first reduce to this dimensionality with PCA')

    parser.add_argument('--normalise', action="store_true",
                        help='normalise each vector to a unit hypersphere')

    parser.add_argument('-N', '--no-norm-norm-norm', action="store_true",
                        help='less normalisation')

    parser.add_argument('-p', '--perplexity', type=float, default=30.0,
                        help='perplexity for t-SNE')

    parser.add_argument('-i', '--input',
                        help='input filename (CSV)')

    parser.add_argument('-o', '--output',
                        help='output filename')

    parser.add_argument('--pca-algo', default='RandomizedPCA',
                        help='see scikti-learn docs. Try "TruncatedSVD". '
                        'default is "RandomizedPCA"')

    parser.add_argument('--save-as', default=[], action='append',
                        help="Save image to this filename")

    parser.add_argument('--no-window', action='store_true',
                        help="don't show image in an X window")

    parser.add_argument('--hide-axes', action='store_true',
                        help="don't draw the bloody axes")

    parser.add_argument('--no-figure', action='store_true',
                        help="only export the coordinates, no graphics")

    args = parser.parse_args()

    f = open(args.input)
    header = f.read()
    skiprows = header[0].isalpha()
    f.close()
    f = open(args.input)
    data = np.loadtxt(f, delimiter=",", skiprows=skiprows)
    f.close()

    if not args.no_norm_norm_norm:
        data = norm_norm_norm(data)

    Y = fast_tsne(data, perplexity=args.perplexity, theta=0.5,
                  normalise_mean=args.normalise, pca_d=args.pca_first,
                  pca_algo=args.pca_algo)

    if args.output:
        np.savetxt(args.output, Y, fmt='%.8e', delimiter=', ')

    if not args.no_figure:
        fig = plt.figure(figsize=(12, 10))
        ax = fig.add_subplot(111)

        ax.plot(Y[:, 0], Y[:, 1], '.')

        if args.hide_axes:
            ax.spines['top'].set_visible(False)
            ax.spines['right'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            ax.set_yticks([])

        for sfn in args.save_as:
            plt.savefig(sfn, bbox_inches='tight', dpi=200)

        if not args.no_window:
            plt.show()

main()
